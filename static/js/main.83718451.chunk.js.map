{"version":3,"sources":["DataHandling.js","components/USmap/USstate.js","components/USmap/Legend.js","components/USmap/USmap.js","components/Controls/DropDown/DropDown.js","components/Controls/index.js","components/DataContent/StateTitle.js","components/LineGraph/AvgLine.js","components/D3blackbox.js","components/LineGraph/XAxis.js","components/LineGraph/YAxis.js","components/LineGraph/Legend.js","components/LineGraph/LineGraph.js","components/DataContent/DataContent.js","App.js","serviceWorker.js","index.js"],"names":["cleanUSStateName","d","code","id","Number","name","ChoroplethColors","USstate","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pRef","React","createRef","updateUSstateFilter","reset","setState","USstateFilter","State_Name","notifyUpdate","selectUSstate","event","newState","stateName","_","find","USstateNames","parseInt","current","attributes","title","value","state","_window$location$hash","window","location","hash","replace","split","slicedToArray","filters","join","updateDataFilter","nextProps","nextState","_this$props","zoomToState","_this2","_this$props2","geoPath","feature","quantize","statePerCapitaValues","phiPerEnrolleeValues","color","react_default","a","createElement","style","fill","className","onMouseOver","perCapitaChange","percentChange","years","formattedYears","each","b","push","year","perCapitaMean","d3","phiPerEnrolleeChange","phiYears","phiFormattedYears","phiPerEnrolleeMean","onHover","toFixed","bind","onClick","ref","Component","domain","range","xScale","rangeRound","Legend","x","y","opacity","height","width","map","i","key","stroke","fontSize","fontWeight","USmap","projection","scale","row","statePerCapita","stateId","sortedCapitas","mean","_this$state","hover","usTopoJson","values","us","USstateMesh","topojson","objects","states","USstates","features","perCapitaValueMap","fromPairs","USmap_USstate","strokeLineJoin","USmap_Legend","translate","statePaths","centroid","objectSpread","DropDown","selected","target","concat","label","capitalize","toUpperCase","toggleNames","onChange","_addOption","Controls","data","Set","Controls_DropDown_DropDown","Array","from","selectedUSstate","StateTitle","AvgLine","_ref","bottomMargin","lineColor","yScale","line","transform","D3blackbox","D3render","_React$Component","Blackbox","_getPrototypeOf2","_len","arguments","length","args","_key","apply","anchor","inherits","createClass","XAxis","axis","tickFormat","ticks","YAxis","lineColors","lineTitles","cx","cy","r","LineGraph","days","amount","score","yAmount","toLocaleString","mentalHealthDays","physHealthDays","genHealthScore","USmentalMean","USphysicalMean","yScaleCapita","capitaLine","mentalData","physData","genData","capitaData","mentalHealthData","numDaysPerYear","yearValue","physHealthData","genHealthData","scorePerYear","scoreValue","perCapitaSlice","dollarValue","slice","genHealthMean","LineGraph_Legend","LineGraph_AvgLine","strokeWidth","circleMark","LineGraph_XAxis","LineGraph_YAxis","wordSpacing","dy","href","DataContent","USperCapitaMean","phiPerCapitaMean","capitaMeanPercentage","phiMeanPercentage","capitaMean","phiMean","USavgPhi","cap1","cap2","cap3","cap4","cap5","cap6","st1","st2","st3","st4","st5","st6","USavgCapita","DataContent_StateTitle","components_LineGraph_LineGraph","App","filter","filteredBy","stateLabel","onStatUpdate","sampleData","mentalHealth","physHealth","genHealth","phiPerEnrollee","assertThisInitialized","callback","undefined","noop","Promise","all","then","_ref2","loadData","getStateId","Average_Annual_Percent_Growth","2001","Y2001","2002","Y2002","2003","Y2003","2004","Y2004","2005","Y2005","2006","Y2006","2007","Y2007","2008","Y2008","2009","Y2009","2010","Y2010","2011","Y2011","2012","Y2012","2013","Y2013","2014","Y2014","2015","Y2015","2016","Y2016","2017","Y2017","getStateName","_this3","genHealthDays","stateValues","stateValue","statePerCapitaValue","phiPerEnrolleeValue","formattedPerCapitaYears","capita","sortBy","USperCapita","formattedPhiYears","test","mentalMean","physicalMean","marginBottom","marginTop","components_Controls","components_USmap_USmap","stateData","components_DataContent_DataContent","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83718451.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport _ from 'lodash';\n\nconst cleanUSStateName = d => ({\n    code: d.code,\n    id: Number(d.id),\n    name: d.name\n});\n\n\n// _.noop returns undefined\nexport const loadData = (callback = _.noop) => {\n    Promise.all([\n        d3.json(\"data/us.json\"), //state paths\n        d3.csv(\"data/sample.csv\"),\n        d3.csv(\"data/state_ment_health.csv\"),\n        d3.csv(\"data/state_phys_health.csv\"),\n        d3.csv(\"data/state_gen_health.csv\"),\n        d3.csv(\"data/state_per_capita.csv\"),\n        d3.csv(\"data/phi_per_enrollee.csv\"),\n        d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)\n    ]).then(([us,\n              sampleData,\n              mentalHealth,\n              physHealth,\n              genHealth,\n              statePerCapita,\n              phiPerEnrollee,\n              USstateNames]) => {\n\n        callback({\n          usTopoJson: us,\n          sampleData: sampleData,\n          mentalHealth: mentalHealth,\n          physHealth: physHealth,\n          genHealth: genHealth,\n          statePerCapita: statePerCapita,\n          phiPerEnrollee: phiPerEnrollee,\n          USstateNames: USstateNames\n        });\n    });\n};","// src/components/USstate/USstate.js\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\nimport _ from \"lodash\";\n\nconst ChoroplethColors = [\n    'rgb(222,235,247)',\n    'rgb(198,219,239)',\n    'rgb(158,202,225)',\n    'rgb(107,174,214)',\n    'rgb(66,146,198)',\n    'rgb(33,113,181)',\n    'rgb(8,81,156)',\n    'rgb(8,48,107)'\n];\n\nconst blankColor = 'rgb(198,219,239)';\n\nclass USstate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      USstateFilter: () => true,\n      USstate: \"*\",\n    }\n  }\n\n  // need to create for interaction between d3 and react\n  pRef = React.createRef();\n\n  componenetDidMount() {\n    let [USstate] = window.location.hash\n            .replace(\"#\", \"\")\n            .split(\"-\");\n\n    if (USstate !== \"*\" && USstate) {\n      this.updateUSstateFilter(USstate);\n    }\n  }\n\n  updateUSstateFilter = (USstate, reset) => {\n\n    let filter = d => d.State_Name === USstate;\n\n    this.setState(\n      {\n        USstateFilter: filter,\n        USstate: USstate,\n      },\n      () => this.notifyUpdate()\n    );\n  }\n\n  // Rudimentary \"routing\"\n  notifyUpdate(){\n    window.location.hash = [this.state.USstate || \"*\"].join(\"-\");\n    this.props.updateDataFilter(\n      (filters => {\n        return d => filters.USstateFilter(d);\n      })(this.state),\n      {\n        USstate: this.state.USstate\n      }\n    );\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { zoomToState, value } = this.props;\n    return zoomToState !== nextProps.zoomToState || value !== nextProps.value;\n  }\n\n  getStateName() {\n    return  _.find(this.props.USstateNames, { id: parseInt(this.pRef.current.attributes.title.value) }).name;\n  }\n\n  selectUSstate = (event, newState) => {\n    const stateName = _.find(this.props.USstateNames, { id: parseInt(this.pRef.current.attributes.title.value) }).name;\n    // this.props.updateDataFilter(stateName, !newState)\n    this.updateUSstateFilter(stateName)\n  };\n\n  render() {\n    const { value, geoPath, feature, quantize, statePerCapitaValues, phiPerEnrolleeValues } = this.props;\n    let color = blankColor;\n    if (value) {\n      color = ChoroplethColors[quantize(value)];\n    }\n\n    const highlight = () => {\n\n      const stateName = _.find(this.props.USstateNames, { id: parseInt(this.pRef.current.attributes.title.value) }).name;\n      const perCapitaChange = _.find(statePerCapitaValues, {state: stateName}).percentChange;\n\n      const years = _.find(statePerCapitaValues, {state: stateName}).years\n      const formattedYears = []\n        _.each(years, (a,b) => {\n          formattedYears.push({'year': a});\n        });\n\n      const perCapitaMean = d3.mean(formattedYears, (d) => {\n        return d.year;\n      });\n\n      const phiPerEnrolleeChange = _.find(phiPerEnrolleeValues, {state:stateName}).percentChange;\n      const phiYears = _.find(phiPerEnrolleeValues, {state: stateName}).years;\n      const phiFormattedYears = []\n        _.each(phiYears, (a,b) => {\n          phiFormattedYears.push({'year': a});\n        });\n      const phiPerEnrolleeMean = d3.mean(phiFormattedYears, (d) => {\n        return d.year;\n      });\n\n      this.props.onHover(\n        stateName,\n        perCapitaChange,\n        perCapitaMean.toFixed(2),\n        phiPerEnrolleeChange,\n        phiPerEnrolleeMean.toFixed(2)\n      );\n    }\n\n    return (\n      <path d={geoPath(feature)}\n            style={{fill:color}}\n            title={feature.id}\n            className=\"state-borders\"\n            onMouseOver={highlight.bind(this)}\n            onClick={this.selectUSstate.bind(this)}\n            ref={this.pRef}\n\n      />\n    );\n  }\n}\n\nexport default USstate;","// src/components/USstate/Legend.js\nimport * as d3 from \"d3\";\nimport React, {Component} from \"react\";\n\nconst color = d3.scaleThreshold().domain(d3.range(1, 10)).range(d3.schemeGreens[9]);\n\nconst ChoroplethColors = [\n    'rgb(247,251,255)',\n    'rgb(222,235,247)',\n    'rgb(198,219,239)',\n    'rgb(158,202,225)',\n    'rgb(107,174,214)',\n    'rgb(66,146,198)',\n    'rgb(33,113,181)',\n    'rgb(8,81,156)',\n    'rgb(8,48,107)'\n];\n\nconst xScale = d3.scaleLinear()\n  .domain([1, 10])\n  .rangeRound([1,10]);\n\nclass Legend extends Component {\n\n  render() {\n\n    return (\n      <g>\n        <rect x={0} y={360} fill={\"white\"} opacity={.5} height={70} width={500} />\n        {ChoroplethColors.map(function (d,i) {\n          if (d[0] == null) d[0] = xScale.domain()[0];\n          if (d[1] == null) d[1] = xScale.domain()[1];\n          return (\n            <g key={i}>\n              <rect\n                style={{fill: ChoroplethColors[i], width: 20, height: 20, stroke: 'black'}}\n                x={170+20*i}\n                y={370}\n                title={null}\n              />\n              <text fontSize={10} x={175 +20*i} y={400}>{i}%</text>\n            </g>\n          )\n          }\n        )};\n        <text x={110} y={415} fontSize={11} fontWeight={\"bold\"}>Annual Avg. Growth From Medicaid Enrollment 2000-2017</text>\n      </g>\n\n    );\n  };\n}\n\nexport default Legend;","// src/components/USmap/USmap.js\n\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport _ from 'lodash';\n\nimport USstate from './USstate';\nimport Legend from './Legend';\n\nclass USmap extends Component {\n  constructor(props) {\n    super(props);\n\n    const projection = d3.geoAlbersUsa().scale([1000]); // scale things down so see entire US;\n    this.state = {\n      geoPath: d3.geoPath().projection(projection),\n      quantize: d3.scaleQuantize().range(d3.range(9)),\n      projection\n    };\n  }\n\n  // getDerivedStateFromProps gets called on every component render,\n  // otherwise viz would be one update behind, however,\n  // need to avoid complex calculation, check performance, use memoization, etc\n  static getDerivedStateFromProps(props, state) {\n    let { projection, quantize, geoPath } = state;\n    // need for zooming\n    projection.translate([props.width/2 + 20, props.height/2])\n      .scale(props.width * 1.2);\n\n    // remove ! to enable zoom\n    if (props.zoomToState == 'all') {\n      projection.scale(props.width * 1.2);\n    }\n    else if (props.zoomToState && props.usTopoJson) {\n\n      const us = props.usTopoJson,\n        statePaths = topojson.feature(us, us.objects.states).features,\n        id = _.find(props.USstateNames, { name: props.zoomToState }).id;\n        projection.scale(props.width * 4.5);\n\n      const centroid = geoPath.centroid(_.find(statePaths, { id: id })),\n        translate = projection.translate();\n\n        projection.translate([\n          translate[0] - centroid[0] + props.width/2 + 20,\n          translate[1] - centroid[1] + props.height/2 + 50\n      ]);\n    }\n\n    if (props.values) {\n      quantize.domain([0,9]);\n    }\n\n    return {\n      ...state,\n      projection,\n      quantize\n    };\n  }\n\n  getValue(id) {\n    const row = _.find(this.props.statePerCapita, {stateId: id});\n\n    if (row) {\n\n      return row.percentChange;\n    }\n    return null;\n  }\n\n  // Us if we wanted to show per capita $$ for choropleth\n  getDollarValue(id) {\n\n    debugger;\n    const name = _.find(this.props.USstateNames, {stateId: id}).name;\n    const row = _.find(this.props.sortedCapitas, {name: name})\n    if (row) {\n\n      return row.mean;\n    }\n    return null;\n  }\n\n\n  render() {\n\n    const { geoPath, quantize, hover } = this.state,\n      { usTopoJson, values, zoomToState, updateDataFilter, onHover, statePerCapitaValues, phiPerEnrolleeValues,\n      sortedCapitas} = this.props;\n\n    if (!usTopoJson) {\n      return null;\n    } else {\n\n      const us = usTopoJson,\n        USstateMesh = topojson.mesh(\n          us,\n          us.objects.states,\n          (a,b) => a !== b\n        ),\n        USstates = topojson.feature(us, us.objects.states).features;\n\n        // console.log('values', values);\n        const stateValueMap = _.fromPairs(\n          values.map(d => [d.stateId, d.percentChange])\n        );\n      const perCapitaValueMap = _.fromPairs(\n          statePerCapitaValues.map(d => [d.stateId, d.percentChange])\n        );\n\n      const perCapitaDollarValueMap = _.fromPairs(\n          sortedCapitas.map(d => [d.id, d.mean])\n        );\n\n        // console.log('values', stateValueMap);\n      return (\n\n        <g className=\"states\">\n          {USstates.map(feature => (\n            <USstate\n              geoPath={geoPath}\n              feature={feature}\n              zoomToState={zoomToState}\n              key={feature.id}\n              value={perCapitaValueMap[feature.id]}\n              // dollarValue={perCapitaDollarValueMap[feature.id]}\n              quantize={quantize}\n              updateDataFilter={updateDataFilter}\n              stateName={feature.id}\n              USstateNames={this.props.USstateNames}\n              hover={hover}\n              onHover={onHover}\n              statePerCapitaValues={statePerCapitaValues}\n              phiPerEnrolleeValues={phiPerEnrolleeValues}\n            />\n          ))};\n          <path d={geoPath(USstateMesh)}\n                style={{\n                fill: \"none\",\n                stroke: \"#023446\",\n                strokeLineJoin: \"round\"\n                }}\n          />\n          <Legend x={0} y={0} />\n\n        </g>\n      );\n    }\n  }\n}\nexport default USmap;","import React from \"react\";\n\nclass DropDown extends React.Component {\n\n  selectUSstate = ( event, newState ) => {\n    // this.setState({value: event.target.value});\n    let selected = event.target.value;\n    this.props.updateDataFilter( selected, !newState);\n  };\n\n  _addOption(name){\n    if (name !== \"\") {\n      let key = `toggle-${name}`,\n      label = name;\n\n    if (this.props.capitalize) {\n      label = label.toUpperCase();\n    }\n\n    return <option\n              label={label}\n              name={name}\n              key={key}\n              value={ name }\n            >\n              {name}\n            </option>\n    }\n  }\n\n  render() {\n    const {toggleNames} = this.props;\n    return (\n      <div id=\"stateDropDown\">\n        <select onChange={this.selectUSstate}>\n          <option value=\"all\">Select State</option>\n          <option value=\"all\">Show All States</option>\n          {toggleNames.map(name => this._addOption(name))}\n        </select>\n      </div>\n    )\n\n  }\n}\n\nexport default DropDown;","import React from \"react\";\nimport DropDown from './DropDown/DropDown';\n\nclass Controls extends React.Component {\n  state = {\n    USstateFilter: () => true,\n    USstate: \"*\"\n  }\n\n  componenetDidMount() {\n    let [USstate] = window.location.hash\n            .replace(\"#\", \"\")\n            .split(\"-\");\n\n    if (USstate !== \"*\" && USstate) {\n        this.updateUSstateFilter(USstate);\n    }\n\n  }\n\n  updateUSstateFilter = (USstate, reset) => {\n\n    let filter = d => d.State_Name === USstate;\n\n    this.setState(\n      {\n        USstateFilter: filter,\n        USstate: USstate\n      },\n      () => this.notifyUpdate()\n    );\n  }\n\n  // Rudimentary \"routing\"\n  notifyUpdate(){\n    window.location.hash = [this.state.USstate || \"*\"].join(\"-\");\n    this.props.updateDataFilter(\n      (filters => {\n        return d => filters.USstateFilter(d);\n      })(this.state),\n      {\n        USstate: this.state.USstate\n      }\n    );\n  }\n\n  render() {\n    const { data } = this.props;\n    const USstates = new Set(data.map(d => d.State_Name));\n\n    return (\n      <div>\n        <DropDown\n          data={data}\n          toggleNames={Array.from(USstates.values())}\n          selectedUSstate={this.state.USstate}\n          updateDataFilter={this.updateUSstateFilter}\n          />\n     </div>\n    );\n  }\n}\n\nexport default Controls;","// src/components/DataContent/StateTitle.js\n\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nclass StateTitle extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { zoomToState, values } = this.props;\n\n    return (\n      <g>\n        <text x={520} y={30} className={\"stateTitle\"}>{zoomToState}</text>\n      </g>\n    )\n  }\n}\n\nexport default StateTitle;","// src/components/LineGraph/AvgLine.js\n\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\nconst AvgLine = ({\n  value,\n  width,\n  height,\n  x,\n  y,\n  bottomMargin,\n  mean,\n  lineColor\n}) => {\n  const yScale = d3\n          .scaleLinear()\n          .domain([0, 30])\n          .range([height - y - bottomMargin, 0]),\n          line = d3.line()([[0, 5], [width, 5]]);\n\n  const avgValue = mean;\n\n  const translate = `translate(${20}, ${yScale(avgValue)})`,\n        label = `US avg: ${mean}`;\n\n  return (\n      <g className=\"avgLine\" transform={translate}>\n        <path d={line} fill={\"none\"} stroke={lineColor}/>\n      </g>\n  );\n};\n\nexport default AvgLine;","import React from \"react\";\n/* Blackbox Higher Order Component, this returns another react component, it's like an object factory\nThis is wrapper for d3 code so it can be rendered in the react app, gives control of the DOM back to D3\nhttps://github.com/Swizec/d3blackbox */\n\nexport default function D3blackbox(D3render) {\n  return class Blackbox extends React.Component {\n    anchor = React.createRef();\n\n    componentDidMount() {\n      D3render.call(this);\n    }\n    componentDidUpdate() {\n      D3render.call(this);\n    }\n\n    render() {\n      const { x, y } = this.props;\n      return <g transform={`translate(${x}, ${y})`} ref={this.anchor} />;\n    }\n  };\n}\n","// src/components/LineGraph/XAxis.js\n\nimport * as d3 from \"d3\";\nimport D3blackbox from \"../D3blackbox\";\n\nconst XAxis = D3blackbox(function() {\n\n  const scale = d3\n    .scaleLinear()\n    .domain([2011, 2017])\n    .range([0, 400]);\n  const axis = d3.axisBottom(scale)\n                .tickFormat(d3.format('d'))\n                .ticks(7);\n\n  d3.select(this.anchor.current).call(axis);\n});\n\nexport default XAxis;","import * as d3 from \"d3\";\nimport D3blackbox from \"../D3blackbox\";\n\nconst YAxis = D3blackbox(function() {\n\n  const scale = d3\n    .scaleLinear()\n    .domain([31, 0])\n    .range([0, 250]);\n  const axis = d3.axisLeft(scale)\n                .tickFormat(d3.format('d'))\n                .ticks(6);\n\n  d3.select(this.anchor.current).call(axis);\n});\n\nexport default YAxis;","// src/components/USstate/Legend.js\nimport D3blackbox from \"../D3blackbox\";\nimport * as d3 from \"d3\";\nimport React, {Component} from \"react\";\nimport _ from \"lodash\";\n\nconst lineColors = ['purple', 'magenta'];\nconst lineTitles = ['Mental Health', 'Physical Health']\n\n\nclass Legend extends Component {\n\n  render() {\n\n    return (\n      <g>\n        {lineColors.map(function (d,i) {\n          return (\n            <g key={i}>\n              <circle\n                style={{fill: lineColors[i], width: 20, height: 20, stroke: 'gray'}}\n                cx={210 + 110*i}\n                cy={20}\n                title={lineTitles[i]}\n                r={4}\n              />\n              <text fontSize={12} x={219 +110*i} y={25}>{lineTitles[i]}</text>\n              <text fontSize={12} x={205 +110*i} y={40} style={{fill: lineColors[i]}}><tspan fontSize={14}>--- </tspan>US Avg</text>\n\n            </g>\n          )\n          }\n        )};\n\n        <circle\n            style={{fill: \"darksalmon\", width: 20, height: 20, stroke: 'gray'}}\n            cx={30}\n            cy={237}\n            title={\"Per Capita Spending\"}\n            r={4}\n          />\n          <text fontSize={12} x={39} y={242}>Per Capita Spending</text>\n\n      </g>\n\n    );\n  };\n}\n\nexport default Legend;","// src/components/LineGraph/LineGraph.js\n\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport AvgLine from \"./AvgLine\";\nimport XAxis from \"./XAxis\";\nimport YAxis from \"./YAxis\";\nimport Legend from \"./Legend\";\n\nclass LineGraph extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  yearValue(a,b) {\n    return {\n      year: parseInt(b),\n      days: parseInt(a)\n    }\n  };\n\n  dollarValue(a,b) {\n    return {\n      year: parseInt(b),\n      amount: parseInt(a)\n    }\n  };\n\n  scoreValue(a,b) {\n    return {\n      year: parseInt(b),\n      score: a\n    }\n  };\n\n  circleMark(year,days){\n    return (\n      <circle\n        key={year}\n        style={{fill: \"white\", width: 2, height: 2, stroke: 'gray'}}\n        cx={year + 20}\n        cy={days}\n        title={null}\n        r={3}\n      />\n    )\n  }\n\n  label(year,yAmount,amount){\n    return (\n      <text\n        key={year}\n        style={{fill: \"black\", width: 2, height: 2, stroke: 'none', fontSize: '10'}}\n        x={year + 22}\n        y={147 + yAmount}\n        title={null}\n        r={3}\n      >\n        ${amount.toLocaleString()}\n      </text>\n    )\n  }\n\n  render() {\n\n    const { zoomToState, values, mentalHealthDays, physHealthDays, genHealthScore, statePerCapitaValues,\n      USmentalMean, USphysicalMean} = this.props;\n\n\n    const height = 250;\n    const width = 400;\n\n    const xScale  = d3.scaleLinear()\n      .domain([2011, 2017]).range([0,width])\n\n    const yScaleCapita = d3.scaleLinear()\n      .domain([0, 14000]).range([120, 0])\n\n    const yScale = d3.scaleLinear()\n      .domain([0, 30])\n      .range([height, 0])\n\n    const line = d3.line()\n      .x((d)=>xScale(d.year) + 20)\n      .y((d)=>yScale(d.days))\n\n     const capitaLine = d3.line()\n      .x((d)=>xScale(d.year) + 20)\n      .y((d)=>yScaleCapita(d.amount))\n\n    const mentalData = _.find(mentalHealthDays, {state:zoomToState});\n    const physData = _.find(physHealthDays, {state:zoomToState});\n    const genData = _.find(genHealthScore, {state:zoomToState});\n    const capitaData = _.find(statePerCapitaValues, {state:zoomToState});\n\n    const mentalHealthData =  _.map(mentalData.numDaysPerYear, (a,b) =>this.yearValue(a,b));\n    const physHealthData =  _.map(physData.numDaysPerYear, (a,b) =>this.yearValue(a,b));\n    const genHealthData =  _.map(genData.scorePerYear, (a,b) =>this.scoreValue(a,b));\n\n    const perCapitaData = _.map(capitaData.years, (a,b) =>this.dollarValue(a,b));\n    const perCapitaSlice = perCapitaData.slice(10, 18);\n    const genHealthMean = d3.mean(genHealthData, (d) => d.score);\n\n    return (\n      <g>\n        <text x={575} y={65} fontWeight={\"bold\"} fill={\"rgb(63, 59, 54)\"}>Mental and Physical Healthy Days Per Month</text>\n        <svg x={520} y={80}>\n          <Legend />\n          <AvgLine x={520}\n                   y={10}\n                   width={400}\n                   height={250}\n                   bottomMargin={5}\n                   mean={USmentalMean}\n                   lineColor={\"purple\"}\n          />\n          <AvgLine x={520}\n                   y={10}\n                   width={400}\n                   height={250}\n                   bottomMargin={5}\n                   mean={USphysicalMean}\n                   lineColor={\"magenta\"}\n          />\n\n          <path className=\"line\"\n                d={line(mentalHealthData)}\n                fill={\"none\"}\n                stroke={\"purple\"}\n                strokeWidth={2}\n          />\n          <path className=\"line\"\n                d={line(physHealthData)}\n                fill={\"none\"}\n                stroke={\"magenta\"}\n                strokeWidth={2}\n          />\n          <svg y={135}>\n            <path className=\"line\"\n               d={capitaLine(perCapitaSlice)}\n               fill={\"none\"}\n               stroke={\"darksalmon\"}\n               strokeWidth={2}\n            />\n            {_.map(perCapitaSlice, (d) => this.circleMark(xScale(d.year),yScaleCapita(d.amount)))}\n          </svg>\n          {_.map(perCapitaSlice, (d) => this.label(xScale(d.year),yScaleCapita(d.amount), d.amount))}\n\n          {_.map(mentalHealthData, (d) => this.circleMark(xScale(d.year),yScale(d.days)))}\n          {_.map(physHealthData, (d) => this.circleMark(xScale(d.year),yScale(d.days)))}\n\n\n          <text x={30} y={35} transform={\"rotate(-90 30 30)\"} className={\"axisLabel\"} fill={'rgb(111, 106, 101)'}>Days</text>\n          <text x={388} y={245} className={\"axisLabel\"} fill={'rgb(111, 106, 101)'}>Years</text>\n\n          <XAxis x={20} y={height} />\n          <YAxis x={20} y={0} />\n\n\n\n          <circle cx={80} cy={330} r={30} fill={\"#a4bec8\"} />\n          <text x={65} y={335} fontWeight={\"bold\"}>{genHealthMean.toFixed(2)}</text>\n          <text x={120} y={327} fontWeight={\"bold\"}>Avg. general health indicator </text>\n          <text x={120} y={343} fontSize={12} wordSpacing={2}>1=Very Good 2=Good 3=Ok 4=Poor 5=Very Poor</text>\n          <text x={20} y={390} dy={0} width={200} height={50} fontSize={12}>\n            <tspan x={20} dy={\"1.2em\"}>Respondants answered a series of questions which were distilled into general,</tspan>\n            <tspan x={20} dy={\"1.2em\"}>physical and mental health scores.  For a summary on the analysis, take a</tspan>\n            <tspan x={20} dy={\"1.2em\"}>look at our\n            <tspan className={\"datalink\"}> <a href=\"https://github.gatech.edu/Team129/BRFSSProject/blob/master/models/brfss_data_lib.ipynb\">\n               BRFSS Survey Questions Analysis</a></tspan>.</tspan>\n          </text>\n        </svg>\n\n      </g>\n    )\n  }\n\n}\n\nexport default LineGraph;","// src/components/DataContent/StateTitle.js\n\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport StateTitle from './StateTitle';\nimport LineGraph from \"../LineGraph/LineGraph\";\n\nclass DataContent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n\n  render() {\n    const { zoomToState, values, mentalHealthDays, physHealthDays, genHealthScore, statePerCapitaValues, USperCapitaMean,\n      phiPerCapitaMean, sortedCapitas, USmentalMean, USphysicalMean, capitaMeanPercentage, phiMeanPercentage} = this.props;\n\n    let capitaMean = 0;\n    if(USperCapitaMean > 0) {\n       capitaMean = parseInt((USperCapitaMean.toFixed(2))).toLocaleString();\n    }\n\n    //should manage in state put running out of time to set up properly\n    let phiMean = 0;\n    if(phiPerCapitaMean > 0) {\n       phiMean = parseInt((phiPerCapitaMean)).toLocaleString();\n    }\n    let USavgPhi = 0;\n    if(phiMeanPercentage > 0) {\n       USavgPhi = phiMeanPercentage.toFixed(2);\n    }\n    let USavgCapita = 0;\n    if(capitaMeanPercentage > 0) {\n       USavgCapita = capitaMeanPercentage.toFixed(2);\n    }\n\n    let cap1, cap2, cap3, cap4, cap5, cap6;\n    let st1, st2, st3, st4, st5, st6;\n    cap1=cap2=cap3=cap4=cap5=cap6=st1=st2=st3=st4=st5=st6 = \"--\";\n\n    if (sortedCapitas.length > 0) {\n\n      st1 = sortedCapitas[50].state;\n      st2 = sortedCapitas[49].state;\n      st3 = sortedCapitas[48].state;\n      st4 = sortedCapitas[2].state;\n      st5 = sortedCapitas[1].state;\n      st6 = sortedCapitas[0].state;\n\n      cap1 = parseInt((sortedCapitas[50].mean)).toLocaleString();\n      cap2 = parseInt((sortedCapitas[49].mean)).toLocaleString();\n      cap3 = parseInt((sortedCapitas[48].mean)).toLocaleString();\n      cap4 = parseInt((sortedCapitas[2].mean)).toLocaleString();\n      cap5 = parseInt((sortedCapitas[1].mean)).toLocaleString();\n      cap6 = parseInt((sortedCapitas[0].mean)).toLocaleString();\n    }\n\n    if (zoomToState !== 'all') {\n      return (\n        <g>\n          <StateTitle zoomToState={zoomToState} values={values} />\n          <LineGraph  zoomToState={zoomToState}\n                      mentalHealthDays={mentalHealthDays}\n                      physHealthDays={physHealthDays}\n                      genHealthScore={genHealthScore}\n                      statePerCapitaValues={statePerCapitaValues}\n                      USmentalMean={USmentalMean}\n                      USphysicalMean={USphysicalMean} />\n        </g>\n      )\n    }\n    else {\n\n      return (\n        <g>\n          <text x={530} y={60} fontSize={24} fontWeight={\"bold\"} fill={\"#045775\"}>Overall US Healthcare Spending\n            <tspan fontSize={14}> (2000-2017)</tspan>\n          </text>\n\n          <text x={530} y={100} fontSize={18} fontWeight={\"bold\"} fill={\"#023446\"}>Average Percent Increase</text>\n          <text x={530} y={130} fontSize={16} fill={\"rgb(8, 48, 107)\"}><tspan className=\"spending\">{USavgCapita}%</tspan> Medicaid</text>\n          <text x={530} y={160} fontSize={16} fill={\"rgb(8, 48, 107)\"}><tspan className=\"spending\">{USavgPhi}%</tspan> Private Health Insurance</text>\n\n          <text x={530} y={210}fontSize={18} fontWeight={\"bold\"}>Average Spending</text>\n          <text x={530} y={240} fontSize={16} fill={\"rgb(8, 48, 107)\"}><tspan className=\"spending\">${capitaMean}</tspan> per capita</text>\n          <text x={530} y={270} fontSize={16} fill={\"rgb(8, 48, 107)\"}><tspan className=\"spending\">${phiMean}</tspan> per enrollee (private health insurance)</text>\n\n          <text x={530} y={320} fontSize={18} fontWeight={\"bold\"}>States with highest per capita spending</text>\n          <text x={530} y={350} fontSize={16} fill={\"rgb(8, 48, 107)\"}>1. {st1}: ${cap1}</text>\n          <text x={530} y={370} fontSize={16} fill={\"rgb(8, 48, 107)\"}>2. {st2}: ${cap2}</text>\n          <text x={530} y={390} fontSize={16} fill={\"rgb(8, 48, 107)\"}>3. {st3}: ${cap3}</text>\n\n          <text x={530} y={430} fontSize={18} fontWeight={\"bold\"}>States with lowest per capita spending</text>\n          <text x={530} y={460} fontSize={16} fill={\"rgb(8, 48, 107)\"}>1. {st6}: ${cap6}</text>\n          <text x={530} y={480} fontSize={16} fill={\"rgb(8, 48, 107)\"}>2. {st5}: ${cap5}</text>\n          <text x={530} y={500} fontSize={16} fill={\"rgb(8, 48, 107)\"}>3. {st4}: ${cap4}</text>\n\n\n        </g>)\n    }\n  }\n}\n\nexport default DataContent;","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nimport './style.css';\nimport { loadData } from \"./DataHandling\";\nimport USmap from \"./components/USmap/USmap\";\nimport Controls from \"./components/Controls/\";\nimport DataContent from \"./components/DataContent\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sampleData: [],\n      mentalHealth: [],\n      physHealth: [],\n      genHealth: [],\n      USstateNames: [],\n      statePerCapita: [],\n      phiPerEnrollee: [],\n      USstateFilter: () => true,\n      filteredBy: {\n        USstate: \"*\",\n      },\n      USperCapitaMean: null,\n      stateLabel: \"Pick State\",\n      perCapitaChange: \"--\",\n      perCapitaMean: \"--\",\n      phiPerEnrolleeChange: \"--\",\n      phiPerEnrolleeMean:\"--\"\n    };\n\n    this.onHover = this.onHover.bind(this)\n  }\n\n\n\n  componentDidMount() {\n    loadData(data => this.setState(data));\n  }\n\n  getStateId(USstate) {\n    if (USstate != \"\") {\n      let row = _.find(this.state.USstateNames, {name: USstate});\n      return row.id;\n    }\n    return null;\n  }\n\n  getStateName(USstate) {\n    if (USstate != \"\") {\n      let row = _.find(this.state.USstateNames, {id:  parseInt(USstate.stateId)});\n      return row.name;\n    }\n  }\n\n  stateValue(state) {\n    return {\n      stateId: this.getStateId(state.State_Name),\n      state: state.State_Name,\n      percentChange : state.Average_Annual_Percent_Growth\n    };\n  }\n\n  statePerCapitaValue(state) {\n    return {\n      stateId: this.getStateId(state.State_Name),\n      state: state.State_Name,\n      years: {2001:parseInt(state.Y2001),2002:parseInt(state.Y2002),2003:parseInt(state.Y2003),\n              2004:parseInt(state.Y2004),2005:parseInt(state.Y2005),2006:parseInt(state.Y2006),\n              2007:parseInt(state.Y2007),2008:parseInt(state.Y2008),2009:parseInt(state.Y2009),\n              2010:parseInt(state.Y2010),2011:parseInt(state.Y2011),2012:parseInt(state.Y2012),\n              2013:parseInt(state.Y2013),2014:parseInt(state.Y2014),2015:parseInt(state.Y2015),\n              2016:parseInt(state.Y2016),2017:parseInt(state.Y2017)},\n      percentChange : state.Average_Annual_Percent_Growth\n    };\n  }\n\n  phiPerEnrolleeValue(state) {\n    return {\n      stateId: this.getStateId(state.State_Name),\n      state: state.State_Name,\n      years: {2001:state.Y2001,2002:state.Y2002,2003:state.Y2003,2004:state.Y2004,2005:state.Y2005,2006:state.Y2006,\n        2007:state.Y2007,2008:state.Y2008,2009:state.Y2009,2010:state.Y2010,2011:state.Y2011,2012:state.Y2012,\n        2013:state.Y2013, 2014:state.Y2014, 2015:state.Y2015, 2016:state.Y2016, 2017:state.Y2017},\n      percentChange : state.Average_Annual_Percent_Growth\n    };\n  }\n\n  mentalHealthDays(state) {\n      return {\n      stateId: state.stateId,\n      state: this.getStateName(state),\n      numDaysPerYear: { 2011: state[2011], 2012: state[2012], 2013: state[2013], 2014: state[2014],\n                        2015: state[2015], 2016: state[2016], 2017: state[2017]}\n      };\n\n    return null;\n  }\n\n  physHealthDays(state) {\n      return {\n      stateId: state.stateId,\n      state: this.getStateName(state),\n      numDaysPerYear: { 2011: state[2011], 2012: state[2012], 2013: state[2013], 2014: state[2014],\n                        2015: state[2015], 2016: state[2016], 2017: state[2017]}\n      };\n\n    return null;\n  }\n\n  genHealthDays(state) {\n      return {\n      stateId: state.stateId,\n      state: this.getStateName(state),\n      scorePerYear: { 2011: state[2011], 2012: state[2012], 2013: state[2013], 2014: state[2014],\n                        2015: state[2015], 2016: state[2016], 2017: state[2017]}\n      };\n\n    return null;\n  }\n\n  updateDataFilter = (filter, filteredBy) => {\n    //console.log('filter', filter, filteredBy);\n    this.setState({\n      USstateFilter: filter,\n      filteredBy: filteredBy\n    });\n  };\n\n  onHover = (stateName, perCapitaChange, perCapitaMean, phiPerEnrolleeChange, phiPerEnrolleeMean) => {\n    this.setState({\n      stateLabel: stateName,\n      perCapitaChange: perCapitaChange,\n      perCapitaMean: perCapitaMean,\n      phiPerEnrolleeChange: phiPerEnrolleeChange,\n      phiPerEnrolleeMean: phiPerEnrolleeMean\n    })\n  };\n\n  onStatUpdate = (USperCapitaMean) => {\n    this.setState({USperCapitaMean: USperCapitaMean})\n  }\n\n  render() {\n    const {\n      usTopoJson,\n      sampleData,\n      mentalHealth,\n      physHealth,\n      genHealth,\n      statePerCapita,\n      phiPerEnrollee,\n      USstateNames,\n      filteredBy\n    } = this.state;\n\n    const mentalHealthDays = mentalHealth.slice(0,51).map(\n      state => this.mentalHealthDays(state)\n    ).filter(d=>d.state !== \"\");\n\n    const physHealthDays = physHealth.slice(0,51).map(\n      state => this.physHealthDays(state)\n    ).filter(d=>d.state !== \"\");\n\n    const genHealthDays = genHealth.slice(0,51).map(\n      state => this.genHealthDays(state)\n    ).filter(d=>d.state !== \"\");\n\n    const stateValues = sampleData.map(\n      state => this.stateValue(state)\n    ).filter(d => d.state !== \"\");\n\n    const statePerCapitaValues = statePerCapita.map(\n      state => this.statePerCapitaValue(state)\n    ).filter(d => d.state !== \"\");\n\n    const phiPerEnrolleeValues = phiPerEnrollee.map(\n      state => this.phiPerEnrolleeValue(state)\n    ).filter(d => d.state !== \"\");\n\n    let zoomToState = 'all';\n    if (filteredBy.USstate !== '*') {\n      zoomToState = this.state.filteredBy.USstate;\n    }\n\n    const formattedPerCapitaYears = []\n\n    const UScapita =  statePerCapitaValues.map(\n      state => _.each(state.years, (a) => {\n          formattedPerCapitaYears.push({'year': a});\n        })\n    );\n\n    const capita = []\n    _.map(statePerCapitaValues, (state) => {\n      const values = Object.values(state[\"years\"]);\n        const mean = d3.mean(values, (d) => {\n          return d;\n        });\n        capita.push({'state':state[\"state\"], 'mean':mean})\n    });\n\n    const sortedCapitas =_.sortBy(capita, ['mean', 'state']);\n    const USperCapita = d3.mean(formattedPerCapitaYears, (d) => {\n      return d.year;\n    });\n\n    const formattedPhiYears = []\n    const phiCapita =  phiPerEnrolleeValues.map(\n      state => _.each(state.years, (a,b) => {\n          formattedPhiYears.push({'year': a, 'test':b});\n        })\n    );\n\n    const phiPerCapitaMean = d3.mean(formattedPhiYears, (d) => {\n      return d.year;\n    });\n\n    const mentalMean = []\n    _.map(mentalHealthDays, (state) => {\n      const values = Object.values(state[\"numDaysPerYear\"]);\n        const mean = d3.mean(values, (d) => {\n          return d;\n        });\n        mentalMean.push({'state':state[\"state\"], 'mean':mean})\n    });\n    let USmentalMean = 0;\n    USmentalMean = d3.mean(mentalMean, (d) => {\n      return d.mean;\n    });\n\n    const getMentalMean= () => {\n      if (USmentalMean > 0) {\n        return USmentalMean.toFixed(2);\n      }\n      return USmentalMean;\n    }\n\n    let physicalMean = []\n    _.map(physHealthDays, (state) => {\n      const values = Object.values(state[\"numDaysPerYear\"]);\n        const mean = d3.mean(values, (d) => {\n          return d;\n        });\n        physicalMean.push({'state':state[\"state\"], 'mean':mean})\n    });\n\n    let USphysicalMean = 0;\n    USphysicalMean = d3.mean(physicalMean, (d) => {\n      return d.mean;\n    });\n\n\n    const getUSphysicalMean= () => {\n      if (USphysicalMean > 0) {\n        return USphysicalMean.toFixed(2);\n      }\n      return 0;\n    }\n\n    const capitaMeanPercentage = d3.mean(statePerCapitaValues, (d) => {\n      return d.percentChange;\n    });\n\n    const phiMeanPercentage = d3.mean(phiPerEnrolleeValues, (d) => {\n      return d.percentChange;\n    });\n\n    return (\n       <div className=\"App container\" id=\"main\">\n         <h1 style={{\"marginBottom\":\"15px\"}}>Health Care Spending and Healthiness in the US</h1>\n         <p style={{\"marginTop\":\"15px\",\"width\":\"1000px\"}}><strong>Project Summary: </strong>The project attempts to show the relationship between health care spending and overall healthiness using data from\n           the Behavioral Risk Factor Surveillance System (BRFSS) and from the Centers for Medicare and Medicaid Services (CMS).\n           The visualization shows the comparison of health and spending across the US and for each state.\n         </p>\n         {/*<div>{sortedCapitas[0].state}</div>*/}\n         <Controls\n           data={sampleData}\n           updateDataFilter={this.updateDataFilter}\n           />\n         <svg width=\"1000\" height=\"550\">\n           <rect x={0} y={0} width={1000} height={550} fill={\"#fcf8f5\"} ></rect>\n           <USmap usTopoJson={usTopoJson}\n                  USstateNames={USstateNames}\n                  x={0}\n                  y={50}\n                  width={500}\n                  height={400}\n                  zoomToState={zoomToState}\n                  values={stateValues}\n                  updateDataFilter={this.updateDataFilter}\n                  onHover={this.onHover}\n                  stateData={this.state.label}\n                  statePerCapitaValues={statePerCapitaValues}\n                  phiPerEnrolleeValues={phiPerEnrolleeValues}\n                  sortedCapitas={sortedCapitas}\n           />\n\n           <rect x={0} y={425} width={500} height={125} fill={\"#dae3df\"} ></rect>\n           <rect x=\"500\"\n                 y=\"0\"\n                 width=\"500\"\n                 height=\"600\"\n                 style={{ fill: \"#f7f4ee\" }}\n           />\n           <DataContent zoomToState={zoomToState}\n                        values={stateValues}\n                        mentalHealthDays={mentalHealthDays}\n                        physHealthDays={physHealthDays}\n                        genHealthScore={genHealthDays}\n                        statePerCapitaValues={statePerCapitaValues}\n                        onStatUpdate={this.onStatUpdate}\n                        USperCapitaMean={USperCapita}\n                        USmentalMean={getMentalMean()}\n                        USphysicalMean={getUSphysicalMean()}\n                        phiPerCapitaMean={phiPerCapitaMean}\n                        sortedCapitas={sortedCapitas}\n                        phiMeanPercentage={phiMeanPercentage}\n                        capitaMeanPercentage={capitaMeanPercentage}\n           />\n           <rect x={1} y={1} width={500} height={40} fill={\"#023446\"} ></rect>\n           <text x={15} y={28} fill={\"#abe2c9\"} fontSize={20} fontWeight={\"500\"}>Healthcare Spending in the US</text>\n\n           <rect x={0} y={0} width={1000} height={550} fill={\"none\"} stroke={\"black\"} ></rect>\n\n           <text x={15} y={450} className={\"stateData\"} fontWeight={\"bold\"}>Health Care Spending by State (2000-2017)</text>\n           <text x={15} y={472} className={\"stateData\"}>State: {this.state.stateLabel}</text>\n           <text x={15} y={495} className={\"stateData\"} fontWeight={\"bold\"} fontSize={13}>State Medicaid</text>\n           <text x={15} y={515} className={\"stateData\"}>Ave. Yearly Increase: {this.state.perCapitaChange}%</text>\n           <text x={15} y={535} className={\"stateData\"}>Per Capita: ${this.state.perCapitaMean}</text>\n           <text x={250} y={495} className={\"stateData\"} fontWeight={\"bold\"} fontSize={13}>Private Health Insurance</text>\n           <text x={250} y={515} className={\"stateData\"}>Ave. Yearly Increase: {this.state.phiPerEnrolleeChange}%</text>\n           <text x={250} y={535} className={\"stateData\"}>Per Capita: ${this.state.phiPerEnrolleeMean}</text>\n         </svg>\n\n       </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}